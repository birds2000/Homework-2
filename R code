---
title: "Homework 2"
author: "Bird Smith"
date: "2025-01-23"
output: html_document
---
```{r setup, include=FALSE}
#Download necessary packages
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = FALSE)
library(tidyverse)
library(dplyr)
library(kableExtra)
library(lubridate)
library(stringr)
```

## Question #1

### A.
```{r, echo = FALSE}
#Download the data set
profs <- read.csv('profs.csv')
#Create plot A
ggplot(profs) + 
  geom_histogram(aes(x = eval)) + 
  xlim(1, 5)
```

### B.
```{r, echo = FALSE}
#Create plot B
ggplot(profs) + 
  geom_boxplot(aes(x = native, y = eval))
```

### C. 
```{r, echo = FALSE}
#Create faceted plot C
ggplot(profs) + 
  geom_histogram(aes(x = eval), binwidth = 1) + 
  facet_wrap(~gender, nrow = 2)
```

### D.
```{r, echo = FALSE}
#Create plot D
ggplot(profs) + 
  geom_point(aes(x = eval, y = beauty)) +
  ylim(-2, 2)

```

## Question #2 

### Plot A.
```{r, echo = FALSE}
#Download the data set
bikeshare <- read.csv("bikeshare.csv")
#Aggregate the data by hour to find average rentals
plot_a_data <- aggregate(bikeshare$total, by = list(bikeshare$hr), FUN = mean)
colnames(plot_a_data) <- c("hr", "avg_rentals")
#Create plot A
plot_a <- ggplot(plot_a_data, aes(x = hr, y = avg_rentals)) +
  geom_line(color = "blue") +
  labs(
    title = "Average Hourly Bike Rentals",
    x = "Hour of Day",
    y = "Average Rentals"
  ) +
  theme_minimal()
print(plot_a)
```

### Plot B.
```{r, echo = FALSE}
#Aggregate the data by the hour and the working day label
plot_b_data <- aggregate(bikeshare$total, 
                         by = list(bikeshare$hr, bikeshare$workingday), 
                         FUN = mean)
colnames(plot_b_data) <- c("hr", "workingday", "avg_rentals")
#Create plot B
plot_b <- ggplot(plot_b_data, aes(x = hr, y = avg_rentals)) +
  geom_line(color = "blue") +
  facet_wrap(~workingday, labeller = as_labeller(c("0"="Non-Working Day", "1"="Working Day"))) +
  labs(
    title = "Average Hourly Bike Rentals by Working Day",
    x = "Hour of Day",
    y = "Average Rentals"
  ) +
  theme_minimal()
print(plot_b)
```

### Plot C. 
```{r, echo = FALSE}
#Find data from 9am
bikeshare_9 <- filter(bikeshare, hr == 9)
#Aggregate the data by the weather situation and the working day label
plot_c_data <- aggregate(bikeshare_9$total, 
                         by = list(bikeshare_9$weathersit, bikeshare_9$workingday), 
                         FUN = mean)
colnames(plot_c_data) <- c("weathersit", "workingday", "avg_rentals")
#Create plot C
plot_c <- ggplot(plot_c_data, aes(x = as.factor(weathersit), y = avg_rentals, fill = as.factor(weathersit))) +
  geom_bar(stat = "identity") +
  facet_wrap(~workingday, labeller = as_labeller(c("0" = "Non-Working Day", "1" = "Working Day"))) +
  labs(
    title = "Average Bike Rentals at 9 AM by Weather Situation",
    x = "Weather Situation",
    y = "Average Rentals",
    fill = "Weather"
  ) +
  theme_minimal()
print(plot_c)
```

## Problem #3
### Plot 1.
```{r, echo=FALSE}
#Download the dataset
capmetro_UT <- read.csv("capmetro_UT.csv")
#Recode the categorical variables in sensible, rather than alphabetical, order
capmetro_UT = mutate(capmetro_UT,
                     day_of_week = factor(day_of_week,
                                          levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")),
                     month = factor(month,
                                    levels = c("Sep", "Oct", "Nov")))
#Aggregate the data with the correct variables
boarding_info <- aggregate(capmetro_UT$boarding, 
                           by = list(capmetro_UT$hour_of_day, 
                                     capmetro_UT$day_of_week, 
                                     capmetro_UT$month), 
                           FUN = mean)
#Rename the columns
colnames(boarding_info) <- c("hour_of_day", "day_of_week", "month", "avg_boardings")
#Convert day of week and month to factors again 
boarding_info$day_of_week <- factor(boarding_info$day_of_week, 
                                    levels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))
boarding_info$month <- factor(boarding_info$month, 
                              levels = c("Sep", "Oct", "Nov"))
#Create plot 1
plot1 <- ggplot(boarding_info, aes(x = hour_of_day, y = avg_boardings, color = month)) +
  geom_line(size = 1) +
  facet_wrap(~day_of_week) +
  labs(
    title = "Average Bus Boardings by Hour of Day, Day of Week, and Month",
    x = "Hour of Day",
    y = "Average Boardings",
    color = "Month"
  ) +
  theme_minimal()
print(plot1)
```

### Plot 2.
```{r, echo = FALSE}
#Create plot 2
plot2 <- ggplot(capmetro_UT, aes(x = temperature, y = boarding, color = as.factor(weekend))) +
  geom_point(alpha = 0.5) +
  facet_wrap(~hour_of_day) +
  labs(
    title = "Bus Boardings vs. Temperature by Hour of Day",
    x = "Temperature (Â°F)",
    y = "Number of Boardings",
    color = "Weekend"
  ) +
  theme_minimal()
print(plot2)
```

## Problem #4 
### Part A.
```{r, echo=FALSE}
#Download the dataset
billboard <- read.csv("billboard.csv")
#Aggregate the data by performer, song, and count
popular_songs <- aggregate(billboard$week, 
                           by = list(billboard$performer, 
                                     billboard$song), 
                           FUN = length)
#(I used aggregate instead of using a group_by function to create my new data set.)
colnames(popular_songs) <- c("performer", "song", "count")
#Choose the top 10 popular songs
popular_songs <- popular_songs[order(-popular_songs$count),][1:10,]
#Print the table
print(kable(popular_songs))
```

### Part B.
```{r, echo = FALSE}
#Filter the incompletely recorded years from the data
filtered_billboard <- billboard[billboard$year > 1958 & billboard$year < 2021, ]
#Aggregate the data by year and count the number of occurrences of each song
counts_p_year <- aggregate(filtered_billboard$song, 
                                  by = list(filtered_billboard$year, filtered_billboard$song), 
                                  FUN = length)
colnames(counts_p_year) <- c("year", "song", "count")
#Aggregate the data by year to count the number of unique songs per year
diversity_p_year <- aggregate(counts_p_year$song, 
                                by = list(counts_p_year$year), 
                                FUN = length)
colnames(diversity_p_year) <- c("year", "unique_songs")
#Create the line plot
diversity_plot <- ggplot(diversity_p_year, aes(x = year, y = unique_songs)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Musical Diversity of Billboard Top 100",
    x = "Year",
    y = "Number of Unique Songs",
    caption = "(Data does not include years 1958 and 2021 due to incomplete records)"
  ) +
  theme_minimal()
print(diversity_plot)
```

### Part C.
```{r, echo=FALSE}
#Group the data by performer and song
song_weeks <- group_by(billboard, performer, song)
#Summarize the number of weeks each song appeared on the chart
song_weeks <- summarise(song_weeks, weeks_on_chart =n())
song_weeks <- ungroup(song_weeks)
#Filter the songs that appeared on the chart for at least 10 weeks
ten_week_hits <- filter(song_weeks, weeks_on_chart >=10)
ten_artist <- group_by(ten_week_hits, performer)
#Summarize the number of ten week hits per artist
artist_ten_wks <- summarise(ten_artist, ten_week_hits_count =n())
artist_ten_wks <- ungroup(artist_ten_wks)
#Filter the artists that have 30 or more ten week hits
artist_ten_wks <- filter(artist_ten_wks, ten_week_hits_count >=30)
#Reorder the performers by the number of ten week hits
artist_ten_wks$performer <- fct_reorder(artist_ten_wks$performer, artist_ten_wks$ten_week_hits_count)
#Create the bar plot
bar_plot <- ggplot(artist_ten_wks, aes(x = performer, y = ten_week_hits_count)) +
  geom_bar(stat = "identity", fill = "lightblue") +
  coord_flip() +  #Flipped coordinates for better readability
  labs(
    title = "Artists with at least 30 Ten-Week Hits",
    x = "Artist",
    y = "# of Ten-Week Hits",
    caption = "(Ten-week hit = a song that appeared on the Billboard Top 100 for at least 10 weeks.)"
  ) + 
  theme_minimal()
print(bar_plot)
```
